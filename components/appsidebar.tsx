"use client";
import Link from "next/link";
import Image  from "next/image";
import disocurse from "../images/discourse-img.svg";
import file_img from "../images/file-img.svg";
import pen_to_square from "../images/pen-to-square-img.svg";
import { getOrCreateUuid } from "@/custom_utils/utility_functions";
import { Sidebar, SidebarContent, SidebarFooter, SidebarTrigger, SidebarGroup, SidebarGroupLabel, SidebarMenu, SidebarMenuItem, SidebarMenuButton } from "./ui/sidebar";
import { useEffect, useState } from "react";
import { useToast } from "@/hooks/use-toast";

// structure for previous things generated by the user
interface PreviousGenerations{
    id: string,
    nav_summary: string,
}
export default function AppSideBar(){
    const [previouslyGeneratedCrashCourses, setPrevioulsyGeneratedCrashCourses] = useState<PreviousGenerations []>([])
    const [previouslyGeneratedSummaries, setPreviouslyGeneratedSummaries] = useState<PreviousGenerations []>([])
    const [previouslyGeneratedPracticeTests, setPreviouslyGeneratedTests] = useState<PreviousGenerations []>([])
    const { toast } = useToast();
    const baseServerUrl: string = process.env.NEXT_PUBLIC_SERVER_URL;

    // function to get previously generated crash courses
    async function getGeneratedCrashCourses(){
        // construct payload
        const preplyai_user_id = getOrCreateUuid()
        const payload  = new FormData();
        payload.append("generator_uuid", `${preplyai_user_id}`)

        try{
            const response = await fetch(`${baseServerUrl}crash-course/get-generations/`, {
                method: "POST",
                body: payload
            })
            if (!response.ok){
                throw new Error("Failed to fetch from server.")
            }
            const data = await response.json();
            setPrevioulsyGeneratedCrashCourses(data["crash_course_generations"]);
        }
        catch(error: any){
            if (error instanceof Error){
                toast({
                    variant: "destructive",
                    title: "Error",
                    description: `${error.message}. Please try again later.`
                });
            }
        } 
    }

    // function to get previously generated Summaries
    async function getGeneratedSummaries(){
        // construct payload
        const preplyai_user_id = getOrCreateUuid()
        const payload  = new FormData();
        payload.append("generator_uuid", `${preplyai_user_id}`)

        try{
            const response = await fetch(`${baseServerUrl}summary/get-generations/`, {
                method: "POST",
                body: payload
            })
            if (!response.ok){
                throw new Error("Failed to fetch from server.")
            }
            const data = await response.json();
            setPreviouslyGeneratedSummaries(data["summary_generations"]);
        }
        catch(error: any){
            if (error instanceof Error){
                toast({
                    variant: "destructive",
                    title: "Error",
                    description: `${error.message}. Please try again later.`
                });
            }
        }
    }

    // function to get previously genertaed practice tests
    async function getGeneratedPracticeTests(){
        const preplyai_user_id = getOrCreateUuid()
        const payload  = new FormData();
        payload.append("generator_uuid", `${preplyai_user_id}`)

        try{
            const response = await fetch(`${baseServerUrl}practice-test/get-generations/`, {
                method: "POST",
                body: payload
            })
            if (!response.ok){
                throw new Error("Failed to fetch from server.")
            }
            const data = await response.json();
            setPreviouslyGeneratedTests(data["practice_test_generations"]);
        }
        catch(error: any){
            if (error instanceof Error){
                toast({
                    variant: "destructive",
                    title: "Error",
                    description: `${error.message}. Please try again later.`
                });
            }
        } 

    }

    useEffect(()=>{
        getGeneratedCrashCourses();
        getGeneratedSummaries();
        getGeneratedPracticeTests();
    }, [])

    return(
        <Sidebar className="mt-16 fixed inline w-64 z-50">
            <SidebarTrigger className="mt-4 ml-6 h-10 w-10 md:hidden"></SidebarTrigger>
            <SidebarContent>
              
                <SidebarGroup>
                    <SidebarGroupLabel className="font-bold text-lg text-black">Crash Courses</SidebarGroupLabel>
                    <SidebarMenu>
                        {previouslyGeneratedCrashCourses && 
                        previouslyGeneratedCrashCourses.map((generated_crash_course: PreviousGenerations, index)=>(
                            <SidebarMenuItem key={index}>
                                <Link href={`/crashcourse/${generated_crash_course.id}/`}>
                                    <SidebarMenuButton>
                                        {generated_crash_course.nav_summary}
                                    </SidebarMenuButton>
                                </Link>
                            </SidebarMenuItem>

                        ))}
                    </SidebarMenu>
                </SidebarGroup>


                <SidebarGroup>
                    <SidebarGroupLabel className="font-bold text-lg text-black">Pracrice Tests</SidebarGroupLabel>
                    <SidebarMenu>
                        {previouslyGeneratedPracticeTests && 
                        previouslyGeneratedPracticeTests.map((generated_test: PreviousGenerations, index)=>(
                            <SidebarMenuItem key={index}>
                                <Link href={`/testprep/test/${generated_test.id}/`}>
                                    <SidebarMenuButton>
                                        {generated_test.nav_summary}
                                    </SidebarMenuButton>
                                </Link>
                            </SidebarMenuItem>
                        ))}
                    </SidebarMenu>
                </SidebarGroup>


                <SidebarGroup>
                    <SidebarGroupLabel className="font-bold text-lg text-black">Summaries</SidebarGroupLabel>
                    <SidebarMenu>
                        {previouslyGeneratedSummaries && 
                        previouslyGeneratedSummaries.map((generated_summary: PreviousGenerations, index)=>(
                            <SidebarMenuItem key={index}>
                                <Link href={`/summary/${generated_summary.id}/`}>
                                    <SidebarMenuButton>
                                        {generated_summary.nav_summary}
                                    </SidebarMenuButton>
                                </Link>
                            </SidebarMenuItem>
                        ))}
                    </SidebarMenu>
                </SidebarGroup>


            </SidebarContent>
            <SidebarFooter className="h-2/5 flex">
            <h3 className="text-center">Apps</h3>
            <div className="flex flex-col">


                <Link href="/summary">
                    <div className="flex flex-row items-center border-slate-200 p-2 rounded-md hover:bg-slate-100 transition-all">
                        <Image alt="preplyai-logo" src={file_img} className="h-6 object-contain w-6"/>
                        <p className="ml-3 text-sm text-slate-800">Summarize PDF</p>
                    </div>
                </Link>


                <Link href="/testprep/">
                    <div className="flex flex-row items-center border-slate-200 p-2 rounded-md hover:bg-slate-100 transition-all">
                        <Image alt="preplyai-logo" src={pen_to_square} className="h-6 object-contain w-6"/>
                        <p className="ml-3 text-sm text-slate-800">Test Prep</p>
                    </div>
                </Link>


                <Link href="/crashcourse/">
                    <div className="flex flex-row items-center border-slate-200 p-2 rounded-md hover:bg-slate-100 transition-all">
                        <Image alt="preplyai-logo" src={disocurse} className="h-6 object-contain w-6"/>
                        <p className="ml-3 text-sm text-slate-800">Crash Course</p>
                    </div>
                </Link>


            </div>

            </SidebarFooter>
        </Sidebar>

    )
}